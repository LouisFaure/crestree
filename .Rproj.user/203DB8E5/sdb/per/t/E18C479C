{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Analysis of branching trajectories\"\n#author: \"Ruslan Soldatov\"\n#date: \"`r Sys.Date()`\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{Analysis of branching trajectories}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\n```{r setup, include = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"##\"\n)\n```\n\nThis vignette describes tree reconstruction procedure and basic routines to explore gene expression patterns associated with the tree. It demonstrates application of the tree analysis to neural crest system. The guideline starts with processed data, including normalized gene expression matrix and t-SNE embedding, shows how to reconstruct the tree, analyse transcriptional events along the tree and provides a number of visualization routines. \n\n## Preliminaries: loading the libraries\n\n```{r,warning = FALSE, message = FALSE}\nlibrary(igraph)\nlibrary(mgcv)\nlibrary(quadprog) \nlibrary(pcaMethods) \nlibrary(Rcpp) \nlibrary(inline) \nlibrary(RcppArmadillo) \nlibrary(Rfast)\n\nlibrary(crestree)\n```\n  \n## Loading the data\nTree reconstruction requires a gene expression matrix. Addditionally, exploration of the tree on top of existing 2D embedding significantly simplifies interpretation. It is thus important to provide embedding of cells (e.g. t-SNE, PCA etc.). The following command uploads processed neural crest data, including expression matrix and t-SNE embedding:\n```{r}\ndata(crest)\n```\nData list `crest` contains embedding `emb`, colors of clusters `clcol` and a vector of neural crest-derived cells `nc.cells` in the dataset:\n```{r}\nemb <- crest$emb\nstr(emb)\n```\n\n```{r}\nclcol <- crest$clcol\nstr(clcol)\n```\n\n```{r}\nnc.cells <- crest$nc.cells\nstr(nc.cells)\n```\nHere is a visualization of embedding with cells colored by clusters, and discriminated neural crest and neural tube cells:\n```{r,fig.width = 3, fig.height = 3}\npar(mfrow=c(1,1),mar=c(4,4,1,1))\nplot(crest$emb,col=crest$clcol,pch=ifelse( rownames(crest$emb)%in%crest$nc.cells,19,1),cex=0.2,xlab=\"tSNE 1\",ylab=\"tSNE 2\")\nlegend(\"bottomright\",c(\"neural crest\",\"neural tube\"),pch=c(19,1),cex=0.2)\n```\n\nThe data `crest` contains matrix of expression levels normalized to cell size `fpm` and expression levels adjusted for mean-variance trend `wgm`:\n```{r}\nfpm <- crest$fpm\n\nstr(fpm)\n```\n\n```{r}\nwgm <- crest$wgm\n\nstr(wgm)\n\nwgwm <- crest$wgwm # matrix of expression weights\n```\nOf note, `wgm` and `wgwm` contain only 1169 the most over-dispersed genes (as described in the paper), whereas matrix `fpm` contains 15427 genes. \n\n## Running tree reconstruction\nAlgorithm has a number of important parameters to be selected (they can be defined by default, but it is good to have control over them), in particular cell-cell distance `metrics` (cosine-based or euclidean), number of tree principal points (PPs) `M` and tree parameters `lambda` (stringency of the tree) and `sigma` (fuzziness of cells to principal points assignment):\n```{r}\nmetrics <- \"cosine\" \nM <- length(nc.cells) # use as many pricipal points as the number of cells\n```\n\nNow we can model a parsimonious tree using `fpm` experssion matrix:\n```{r,warning = FALSE, message = FALSE, results = \"hide\",fig.width = 3, fig.height = 3}\nlambda <- 150\nsigma <- 0.015\n\nz <- ppt.tree(X=fpm[rownames(wgm),nc.cells], emb=emb, lambda=lambda, sigma=sigma, metrics=metrics, M=M, err.cut = 5e-3, n.steps=50, seed=1, plot=FALSE)\n```\n\nThe reconstructed tree `z`, that is modeled in high-dimensional expression space, can be visualized on top of embedding `emb` using `plotppt` routine:\n```{r, results = \"hide\",fig.width = 3, fig.height = 3}\nplotppt(z,emb,tips=FALSE,cex.tree = 0.1,cex.main=0.2,lwd.tree = 1)\n```\n\nWe next switch to expression matrix `wgm` with weights `wgmw` used in the paper. Of note, optimal tree parameters `lambda` and `sigma` are sensitive to the data properties, such as dataset size or choice of expression matrices. In section **Selection of optimal tree parameters** we discuss a strategy of parameters selection and suggest two guiding routines. Below the tree is modeled and visualized with a new choice of expression matrices:\n```{r, warning = FALSE, message = FALSE, results = \"hide\",fig.width = 3, fig.height = 3}\nlambda <- 250 \nsigma <- 0.045\nppt <- ppt.tree(X=wgm[,nc.cells], W=wgwm[,nc.cells], emb=emb, lambda=lambda, sigma=sigma, metrics=metrics, M=M, err.cut = 5e-3, n.steps=50, seed=1, plot=FALSE)\n\nplotppt(ppt,emb,tips=FALSE,cex.tree = 0.1,cex.main=0.2,lwd.tree = 1)\n```\n\n\\n\nOptionally, stable properties of the tree can be assessed using sampling of cells. Below we generate 20 trees through subsampling of 90% of cells without replacement:  \n```{r}\n#ppt_ensemble <- bootstrap.ppt(X=wgm[,nc.cells], W=wgwm[,nc.cells], emb=emb, metrics=metrics, M=as.integer(length(nc.cells)*0.9), lambda=lambda, sigma=sigma, plot=FALSE,\n#                             n.samples=20,n.cores=20, seed=NULL,replace=FALSE)\n```\n\nSampling of trees can be visualized on embedding using routing `plotpptl`:\n```{r,fig.width = 3, fig.height = 3}\n#plotpptl(ppt_ensemble,emb, cols=adjustcolor(\"grey\",alpha=0.1),alpha=0.05, lwd=1)\n```\n\n## Tree processing\nNow we can prepare the tree for downstream analysis. For that, we will remove small spurious branches, orient the tree by assigning a root and project cells onto the tree.\n\nWhile major stable branches reflect biologically strong signal, small spurious branches likely reflect artifacts or incomplete convergence of the algorithm. Tips and forks of the tree can be explored on top of the embedding with flags `tips=TRUE` and `forks=TRUE` that show ids of principal points of tips and forks. For example, visually five leaves `(380, 178, 98, 99, 572)` correspond to notable branches, while leave `295` reflects spurious branch:\n```{r,fig.width = 3, fig.height = 3}\nplotppt(ppt,emb,tips=TRUE,forks=FALSE,cex.tree = 0.2,lwd.tree = 2)\n```\n\nSpurious branchs are removed using `cleanup.branches` routine, which suggests a number of criterion to eliminate undesired branches. Below we directly remove a branch leading to a tip `295`:\n```{r,fig.width = 3, fig.height = 3}\nppt <- cleanup.branches(ppt,tips.remove = c(295))\n```\nOf note, after removing spurious branches, numeration of the remaining principal point changes:\n```{r,fig.width = 3, fig.height = 3}\nplotppt(ppt,emb,tips=TRUE,forks=FALSE,cex.tree = 0.2,lwd.tree = 2)\n```\n\nThe tree does not provide information about directionality of dynamics. Selection of a tree root with routine `setroot`  is sufficient to orient the tree:\n```{r}\nppt <- setroot(ppt,root=465)\n```\n\nFinally, each cell is projected onto the tree. It provides estimates of a cell pseudotime and branch. Probabilistic position of a cell on the tree is naturally delivered by the method and stored in the field `R` of tree object. For example, probailistic distribution of a given cell on the tree is shown below:\n```{r,fig.width = 3, fig.height = 3}\ncell <- nc.cells[2] # choose a cell\npprobs <- ppt$R[cell,] # probabilities of tee projections\nplotppt(ppt,emb,pattern.tree = ppt$R[cell,],cex.tree = 1,lwd.tree = 0.1) # plot probabilities using pattern.tree parameter\npoints(emb[cell,1],emb[cell,2],cex=1,pch=19,col=\"black\") # show cell position on embedding\n```\n\n\nWe next use routine `project.cells.onto.ppt` to assign maximum likelihood projection of each cell on the tree and estimate cells pseudotime (if `emb` is supplied than the routine plots cells colored by branch position):\n```{r,warning = FALSE, message = FALSE,results = \"hide\",fig.width = 3, fig.height = 3}\nppt <- project.cells.onto.ppt(ppt,emb,n.mapping = 1)\n```\n\n\n## Analysis of tree-associated genes\nWe are ready to study gene expression patterns along the tree. The first step is to identify genes that have expression levels significantly varied along the tree (tree-associated genes). Routine `test.associated.genes` estimates significance of each gene's association with the tree using an input expression matrix, e.g. `fpm`:\n```{r,warning = FALSE, message = FALSE, results = \"hide\", fig.width = 3, fig.height = 3}\nppt <- test.associated.genes(ppt,n.map=1,n.cores = 20,fpm,summary=TRUE)\n```\n\nA field `stat.association` of `ppt` provides summary statistics of genes association, including amplitude of changes along the tree  `A`, p-value `pval`, B-H adjustment for multiple testing `fdr` and binary classification `sign` of differential expression along the tree:\n```{r, results='hide'}\nhead(ppt$stat.association[order(ppt$stat.association$pval),])\n```\n\n```{r, echo=FALSE, results='asis'}\nknitr::kable(head(ppt$stat.association[order(ppt$stat.association$pval),]))\n```\n\nOnly differentially expressed genes (TRUE in `sign`) are later used to model expression patterns along the tree. A set of differentially expressed genes can be manually modified in a column `sign`. \nNow expression levels of differentially expressed genes can be modeled as a function of pseudotime along the tree. \n```{r,warning = FALSE, message = FALSE}\nppt <- fit.associated.genes(ppt,fpm,n.map=1,n.cores=20)\n```\n\nThere are different ways to visualize expression trends of a gene along the tree. For example, as a function of pseudotime:\n```{r,fig.width = 3, fig.height = 3}\ngene <- \"Neurog2\"\nvisualise.trajectory(ppt,gene,fpm[gene,],cex.main = 3)\n```\n\nThe other way is to show how fitted expression levels `fit.summary` change along the tree on the embedding:\n```{r,fig.width = 3, fig.height = 3}\npar(mar=c(4,4,3,1))\nplotppt(ppt,emb,pattern.cell = ppt$fit.summary[gene,],gene=\"Neurog2\",cex.main=1,cex.tree = 1.0,lwd.tree = 0.1,par=FALSE)\n```\n\nWe can now use matrix of expression profiles `fit.summary` smoothed along the tree to cluster differentially expressed genes and explore major tree-associated patterns of expression. First, lets select a subset of genes that have large magnitude of variability along the tree:\n```{r}\ngenes.tree <- rownames(ppt$stat.association)[ppt$stat.association$sign==TRUE & ppt$stat.association$A > 2]\n```\n\n```{r}\nstr(genes.tree)\n```\nThen smoothed expression profiles can be clustered using a variety of methods. Below we use hierarchical clustering with cosine-based similarity:\n```{r}\ndst <- 1-cor(t(ppt$fit.summary[genes.tree,])) # cosine-based similarity measure\nhc <- hclust(as.dist(dst),method=\"ward.D\") # hierarchical clustering\nclust <- cutree(hc,6) # partition of genes in 4 clusters\n```\nClusters of genes can be explored using `visualise.clusters` visualization routine:\n```{r}\nvisualise.clusters(ppt,emb,clust,n.best=6,best.method=\"pca\",cex.gene=0.5,cex.cell=0.05,cex.tree=0.2,reclust=FALSE)\n```\n\n## Analysis of subtree of interest\n\nIn some cases a subtree of the tree, for example a single trajectory, is of particular interest. A set of routines select subtree, visualize gene patterns along the subtree and provide genes associated with the subtree. Below we choose a single trajectory:\n```{r,fig.width = 3, fig.height = 3}\nplotppt(ppt,emb[,],tips=TRUE,tree.col = ppt$pp.info$color,forks=TRUE,cex.tree = 1,lwd.tree = 0.1) # visualize tree tips\nzseg <- extract.subtree(ppt,c(\"465\",\"283\")) # select root and terminal leave of the trajectory\n```\n\nExplore at expression patterns of a gene along selected subtree, defined by `zseg`, using additional parameter `subtree` with two visualization options:\n```{r, fig.width = 3, fig.height = 3}\nplotppt(ppt,emb,gene=gene,mat=fpm,cex.main=1,cex.tree = 1.5,lwd.tree = 0.1,subtree=zseg)\n```\n\n```{r,fig.width = 3, fig.height = 3}\nvisualise.trajectory(ppt,gene,fpm,cex.main = 3,subtree = zseg)\n```\n\nWe also can assess differential expression along the subtree:\n```{r,results=\"hide\"}\nstat.subtree <- test.associated.genes(ppt,n.map=1,fpm,subtree = zseg)\n```\n\nResulting `stat.subtree` is a summary table of genes associated with the subtree:\n```{r, results='hide'}\nhead(stat.subtree[order(stat.subtree$pval),])\n```\n\n```{r, echo=FALSE, results='asis'}\nknitr::kable(head(stat.subtree[order(stat.subtree$pval),]))\n```\n\n## Analysis of bifurcation point\nA particularly interesting implication of the tree is analysis of bifurcation point. Usually, the first step of such analysis is infererence of genes that are differentially expressed between two post-bifurcaiton branches. Bifurcaiton point is formalized as a fork consisting of a root and two leaves. Below we select a root and two leaves:\n```{r}\nplotppt(ppt,emb,tips=TRUE,forks=FALSE,cex.tree = 0.2,lwd.tree = 2)\n```\n\n```{r}\nroot <- 465\nleaves <- c(283,195)\n```\n\nA routine `test.fork.genes` performs inference of genes differentially expressed between post-bifurcation branches:\n```{r}\nfork.de <- test.fork.genes(ppt,fpm,root=root,leaves=leaves,n.cores=30)\n```\nA table `fork.de` contains summary statistics of fold change `effect` and p-value `p` of differential expression between branches:\n```{r, results='hide'}\nhead(fork.de[order(fork.de$p),],)\n```\n\n```{r, echo=FALSE, results='asis'}\nknitr::kable(head(fork.de[order(fork.de$p),],))\n```\n\n## Selection of optimal tree parameters\nChoice of parameters `sigma` and `lambda` for tree reconstruction is of crucial importance. We suggest a combination of formal criteria and exploratory analysis for selection of parameters. First, parameter `sigma` is selected as an optimum of cross validation upon `lambda`=0:\n```{r, warning = FALSE, message = FALSE}\nsig <- sig.explore(X=wgm[,nc.cells],metrics=\"cosine\",sig.lims=seq(0.01,0.1,0.01),plot=TRUE)\n```\n\nOptimum sigma:\n```{r}\nsig\n```\n\nParameter `lambda` is selected upon optimal `sigma` using entropy criteria. However, the estimate is not fully robust. Using routine `lambda.explore` we additionally show trees for two intermediate `lambda` parameters and leave a final choice to the user:\n```{r,warning = FALSE, message = FALSE,results=\"hide\",fig.height=5,fig.width=5}\nlambda.stat <- lambda.explore(X=wgm[,nc.cells],M=length(nc.cells),metrics=\"cosine\",emb=emb,sigma=sig,base=2)\n```\n\n\n\n",
    "created" : 1555352485557.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3048491015",
    "id" : "E18C479C",
    "lastKnownWriteTime" : 1555353053,
    "last_content_update" : 1555353068489,
    "path" : "~/NC/crestree/vignettes/analysis1.Rmd",
    "project_path" : "vignettes/analysis1.Rmd",
    "properties" : {
        "last_setup_crc32" : "76B1A2B31e01648"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}